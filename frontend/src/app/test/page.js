'use client';

import { useState, useEffect } from 'react';

export default function TestPage() {
  const [currentConversationId, setCurrentConversationId] = useState('ac58bfe4-fc1a-4b27-8607-1ab314972766');
  const [iframeKey, setIframeKey] = useState(0);
  const [chatflow, setChatflow] = useState(null);
  const [loading, setLoading] = useState(true);
  const [localStorageData, setLocalStorageData] = useState({});

  // Conversation IDs for testing
  const conversationIds = [
    'ac58bfe4-fc1a-4b27-8607-1ab314972766',
    'e13e4262-f720-43d8-8d8e-7c28ef2981bf'
  ];

  useEffect(() => {
    fetchChatflow();
    loadLocalStorageData();

    // Add message listener for iframe communication
    const handleMessage = (event) => {
      console.log('üì® Received message from iframe:', event.data);

      // Log any messages that might contain conversation info
      if (event.data && typeof event.data === 'object') {
        if (event.data.conversation_id || event.data.conversationId) {
          console.log('üéØ Conversation ID in message:', event.data.conversation_id || event.data.conversationId);
        }
      }
    };

    window.addEventListener('message', handleMessage);

    return () => {
      window.removeEventListener('message', handleMessage);
    };
  }, []);

  const fetchChatflow = async () => {
    try {
      const response = await fetch('http://localhost:8001/api/v1/chatflows/1');
      if (response.ok) {
        const data = await response.json();
        setChatflow(data);
      } else {
        console.error('Failed to fetch chatflow');
        // Fallback: use sample embed URL
        setChatflow({
          id: 1,
          name: 'Test Chatbot',
          embed_url: 'https://udify.app/chatbot/051zePBdBET2RKsv'
        });
      }
    } catch (error) {
      console.error('Error fetching chatflow:', error);
      // Fallback
      setChatflow({
        id: 1,
        name: 'Test Chatbot',
        embed_url: 'https://udify.app/chatbot/051zePBdBET2RKsv'
      });
    } finally {
      setLoading(false);
    }
  };

  const loadLocalStorageData = () => {
    try {
      const data = {};
      for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        data[key] = localStorage.getItem(key);
      }
      setLocalStorageData(data);
    } catch (error) {
      console.error('Error loading localStorage:', error);
    }
  };

  const clearLocalStorage = () => {
    if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a t·∫•t c·∫£ localStorage?')) {
      localStorage.clear();
      setLocalStorageData({});
      alert('ƒê√£ x√≥a t·∫•t c·∫£ localStorage');
    }
  };

  const removeLocalStorageItem = (key) => {
    if (confirm(`X√≥a item "${key}" kh·ªèi localStorage?`)) {
      localStorage.removeItem(key);
      loadLocalStorageData();
      alert(`ƒê√£ x√≥a "${key}" kh·ªèi localStorage`);
    }
  };

  const addLocalStorageItem = () => {
    const key = prompt('Nh·∫≠p key:');
    if (!key) return;

    const value = prompt('Nh·∫≠p value:');
    if (value === null) return;

    localStorage.setItem(key, value);
    loadLocalStorageData();
    alert(`ƒê√£ th√™m "${key}" = "${value}" v√†o localStorage`);
  };

  const handleConversationChange = (conversationId) => {
    console.log('üîÑ Changing conversation to:', conversationId);
    console.log('üìä Previous conversation:', currentConversationId);

    setCurrentConversationId(conversationId);
    setIframeKey(prev => prev + 1); // Force iframe reload

    // Clear any cached conversation data
    localStorage.removeItem('dify_conversation_id');
    localStorage.removeItem('dify_chat_history');
    localStorage.removeItem('conversation_id');

    // Update parent localStorage for debugging
    localStorage.setItem('parent_conversation_id', conversationId);
    loadLocalStorageData();

    // Try multiple approaches for Dify conversation switching
    setTimeout(() => {
      const iframe = document.querySelector('iframe');
      if (iframe && iframe.contentWindow) {
        console.log('üì§ Sending postMessage to iframe with conversation:', conversationId);

        // Method 1: Clear iframe localStorage first
        try {
          iframe.contentWindow.localStorage.clear();
          console.log('üßπ Cleared iframe localStorage');
        } catch (e) {
          console.log('‚ùå Cannot clear iframe localStorage:', e);
        }

        // Method 2: Try postMessage with different formats
        iframe.contentWindow.postMessage({
          type: 'SET_CONVERSATION_ID',
          conversationId: conversationId
        }, '*');

        iframe.contentWindow.postMessage({
          type: 'conversation_change',
          conversation_id: conversationId
        }, '*');

        iframe.contentWindow.postMessage({
          action: 'switch_conversation',
          conversationId: conversationId
        }, '*');

        // Method 3: Try setting localStorage in iframe context
        try {
          iframe.contentWindow.localStorage.setItem('conversation_id', conversationId);
          iframe.contentWindow.localStorage.setItem('dify_conversation_id', conversationId);
          iframe.contentWindow.localStorage.setItem('app_id', '051zePBdBET2RKsv');
          console.log('‚úÖ Set localStorage in iframe context');
        } catch (e) {
          console.log('‚ùå Cannot access iframe localStorage:', e);
        }

        // Method 4: Try dispatching custom event
        iframe.contentWindow.postMessage({
          type: 'dify-chatbot-conversation-change',
          conversationId: conversationId
        }, '*');

        // Method 5: Force reload iframe with new URL and timestamp
        setTimeout(() => {
          const newSrc = `${chatflow.embed_url}?conversationId=${conversationId}&t=${Date.now()}`;
          console.log('üîÑ Reloading iframe with new conversation URL:', newSrc);
          iframe.src = newSrc;
        }, 500);
      }
    }, 1000);
  };

  const testSync = () => {
    // Test ƒë·ªìng b·ªô h√≥a gi·ªØa web v√† dify
    console.log('Testing sync with conversation:', currentConversationId);

    // G·ª≠i request ƒë·ªÉ test ƒë·ªìng b·ªô h√≥a
    fetch('http://localhost:8001/api/v1/chat-history/conversation/' + currentConversationId)
      .then(response => response.json())
      .then(data => {
        console.log('Sync test result:', data);
        const messageCount = Array.isArray(data) ? data.length : (data.messages ? data.messages.length : 0);
        alert(`ƒê·ªìng b·ªô h√≥a th√†nh c√¥ng! T√¨m th·∫•y ${messageCount} tin nh·∫Øn trong conversation ${currentConversationId}`);
      })
      .catch(error => {
        console.error('Sync test failed:', error);
        alert('L·ªói khi test ƒë·ªìng b·ªô h√≥a: ' + error.message);
      });
  };

  const checkCurrentConversation = () => {
    console.log('Checking current conversation data...');
    alert(`Conversation ID hi·ªán t·∫°i: ${currentConversationId}\n\nƒê·ªÉ ki·ªÉm tra data, s·ª≠ d·ª•ng n√∫t "Test ƒê·ªìng B·ªô H√≥a" ho·∫∑c ki·ªÉm tra Network tab trong DevTools ƒë·ªÉ xem API calls t·ª´ Dify.`);
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gray-100">
        <p className="text-xl">ƒêang t·∫£i chatbot...</p>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-100">
      <div className="container mx-auto px-4 py-8">
        <div className="mb-6">
          <h1 className="text-3xl font-bold text-gray-800 mb-2">
            Trang Test Chatbot ID 1
          </h1>
          <p className="text-gray-600">
            Test ƒë·ªìng b·ªô h√≥a gi·ªØa web v√† Dify v·ªõi c√°c conversation IDs
          </p>
        </div>

        {/* LocalStorage Panel */}
        <div className="bg-white rounded-lg shadow-md p-6 mb-6">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold">LocalStorage Manager</h2>
            <div className="flex gap-2">
              <button
                onClick={loadLocalStorageData}
                className="px-3 py-1 bg-blue-500 text-white text-sm rounded hover:bg-blue-600 transition-colors"
              >
                Refresh
              </button>
              <button
                onClick={addLocalStorageItem}
                className="px-3 py-1 bg-green-500 text-white text-sm rounded hover:bg-green-600 transition-colors"
              >
                Add Item
              </button>
              <button
                onClick={clearLocalStorage}
                className="px-3 py-1 bg-red-500 text-white text-sm rounded hover:bg-red-600 transition-colors"
              >
                Clear All
              </button>
            </div>
          </div>

          <div className="bg-gray-50 p-4 rounded-lg max-h-64 overflow-y-auto">
            <p className="text-sm font-medium text-gray-700 mb-3">
              LocalStorage Items ({Object.keys(localStorageData).length}):
            </p>

            {Object.keys(localStorageData).length === 0 ? (
              <p className="text-sm text-gray-500 italic">No localStorage items found</p>
            ) : (
              <div className="space-y-2">
                {Object.entries(localStorageData).map(([key, value]) => (
                  <div key={key} className="flex items-center justify-between bg-white p-3 rounded border">
                    <div className="flex-1 min-w-0">
                      <div className="text-sm font-medium text-gray-900 truncate">{key}</div>
                      <div className="text-xs text-gray-600 truncate max-w-md" title={value}>
                        {value}
                      </div>
                    </div>
                    <button
                      onClick={() => removeLocalStorageItem(key)}
                      className="ml-2 px-2 py-1 bg-red-100 text-red-700 text-xs rounded hover:bg-red-200 transition-colors"
                      title="Remove this item"
                    >
                      ‚úï
                    </button>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>

        {/* Control Panel */}
        <div className="bg-white rounded-lg shadow-md p-6 mb-6">
          <h2 className="text-xl font-semibold mb-4">ƒêi·ªÅu khi·ªÉn Test</h2>

          <div className="mb-4 p-3 bg-gray-50 rounded-lg">
            <p className="text-sm font-medium text-gray-700 mb-2">Debug Info:</p>
            <p className="text-xs text-gray-600">Embed URL: {chatflow?.embed_url}</p>
            <p className="text-xs text-gray-600">Current Conversation: {currentConversationId}</p>
            <p className="text-xs text-gray-600">Full iframe src: {chatflow?.embed_url ? `${chatflow.embed_url}?conversationId=${currentConversationId}` : 'N/A'}</p>
            <p className="text-xs text-gray-600">Iframe Key: {iframeKey}</p>
            <div className="mt-2">
              <button
                onClick={() => {
                  const iframe = document.querySelector('iframe');
                  if (iframe) {
                    console.log('üîç Current iframe src:', iframe.src);
                    console.log('üîç Expected src:', `${chatflow?.embed_url}?conversationId=${currentConversationId}`);
                    alert(`Iframe src: ${iframe.src}\nExpected: ${chatflow?.embed_url}?conversationId=${currentConversationId}`);
                  }
                }}
                className="px-3 py-1 bg-purple-500 text-white text-xs rounded hover:bg-purple-600 transition-colors"
              >
                Check Iframe Src
              </button>
            </div>
          </div>

          <div className="flex flex-wrap gap-4 mb-4">
            {conversationIds.map((convId, index) => (
              <button
                key={convId}
                onClick={() => handleConversationChange(convId)}
                className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                  currentConversationId === convId
                    ? 'bg-blue-600 text-white'
                    : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                }`}
              >
                Conversation {index + 1}: {convId.substring(0, 8)}...
              </button>
            ))}
          </div>

          <div className="flex gap-4">
            <button
              onClick={testSync}
              className="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
            >
              Test ƒê·ªìng B·ªô H√≥a
            </button>

            <button
              onClick={() => {
                // Try setting conversation_id in parent window localStorage
                localStorage.setItem('dify_conversation_id', currentConversationId);
                loadLocalStorageData(); // Refresh localStorage display
                alert(`ƒê√£ set conversation_id: ${currentConversationId} trong localStorage`);
              }}
              className="px-6 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 transition-colors"
            >
              Set LocalStorage
            </button>

            <button
              onClick={() => {
                if (chatflow?.embed_url) {
                  window.open(`${chatflow.embed_url}?conversationId=${currentConversationId}`, '_blank');
                }
              }}
              className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
            >
              M·ªü trong Tab M·ªõi
            </button>

            <button
              onClick={() => {
                // Generate a new UUID for conversation
                const newConvId = crypto.randomUUID();
                console.log('Generated new conversation ID:', newConvId);
                setCurrentConversationId(newConvId);
                setIframeKey(prev => prev + 1);
                alert(`‚úÖ T·∫°o conversation ID m·ªõi: ${newConvId}`);
              }}
              className="px-6 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors"
            >
              T·∫°o Conversation ID M·ªõi
            </button>

            <button
              onClick={() => {
                // Monitor network requests for conversation_id
                console.log('üîç Monitoring network requests...');
                alert('üìä C√°ch monitor network requests:\n\n1. M·ªü DevTools (F12)\n2. Ch·ªçn tab "Network"\n3. Filter: "udify.app" ho·∫∑c "messages"\n4. Chat trong iframe\n5. T√¨m request c√≥ conversation_id parameter\n6. Verify conversation_id c√≥ ƒë√∫ng kh√¥ng\n\nüí° Tip: T·∫Øt "Preserve log" ƒë·ªÉ clear old requests');
              }}
              className="px-6 py-2 bg-cyan-600 text-white rounded-lg hover:bg-cyan-700 transition-colors"
            >
              Monitor Network
            </button>

            <button
              onClick={() => {
                // Test direct API call to Dify
                const testUrl = `https://udify.app/api/messages?conversation_id=${currentConversationId}&limit=20&last_id=`;
                console.log('üîç Testing direct API call:', testUrl);
                console.log('‚ö†Ô∏è Note: This will likely return 401 Unauthorized because direct API calls need authentication');
                
                fetch(testUrl, {
                  method: 'GET',
                  headers: {
                    'Content-Type': 'application/json',
                  },
                })
                .then(response => {
                  console.log('API Response status:', response.status);
                  if (response.status === 401) {
                    console.log('üö´ 401 Unauthorized - This is expected for direct API calls without authentication');
                    alert('üö´ 401 Unauthorized\n\nƒê√¢y l√† ƒëi·ªÅu b√¨nh th∆∞·ªùng! Direct API calls c·∫ßn authentication.\n\nThay v√†o ƒë√≥, h√£y:\n1. M·ªü DevTools ‚Üí Network\n2. Filter "messages"\n3. Chat trong iframe ƒë·ªÉ xem API calls t·ª´ Dify');
                    return;
                  }
                  return response.json();
                })
                .then(data => {
                  if (data) {
                    console.log('API Response data:', data);
                    alert(`API Response:\nStatus: ${response.status}\nData: ${JSON.stringify(data, null, 2)}`);
                  }
                })
                .catch(error => {
                  console.error('API call failed:', error);
                  alert('API call failed: ' + error.message);
                });
              }}
              className="px-6 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
            >
              Test Direct API (401 Expected)
            </button>

            <button
              onClick={() => {
                // Reset everything and start fresh
                console.log('üîÑ Resetting everything...');
                localStorage.clear();
                setLocalStorageData({});
                setCurrentConversationId('ac58bfe4-fc1a-4b27-8607-1ab314972766');
                setIframeKey(prev => prev + 1);
                alert('ƒê√£ reset t·∫•t c·∫£. Conversation s·∫Ω v·ªÅ m·∫∑c ƒë·ªãnh.');
              }}
              className="px-6 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
            >
              Reset Everything
            </button>

            <button
              onClick={() => {
                // Clear iframe localStorage
                const iframe = document.querySelector('iframe');
                if (iframe && iframe.contentWindow) {
                  try {
                    iframe.contentWindow.localStorage.clear();
                    console.log('üßπ Cleared iframe localStorage');
                    alert('ƒê√£ x√≥a localStorage c·ªßa iframe');
                  } catch (e) {
                    console.log('‚ùå Cannot clear iframe localStorage:', e);
                    alert('Kh√¥ng th·ªÉ x√≥a localStorage c·ªßa iframe');
                  }
                }
              }}
              className="px-6 py-2 bg-pink-600 text-white rounded-lg hover:bg-pink-700 transition-colors"
            >
              Clear Iframe LocalStorage
            </button>

            <button
              onClick={() => {
                // Check iframe localStorage
                const iframe = document.querySelector('iframe');
                if (iframe && iframe.contentWindow) {
                  try {
                    const iframeLocalStorage = {};
                    for (let i = 0; i < iframe.contentWindow.localStorage.length; i++) {
                      const key = iframe.contentWindow.localStorage.key(i);
                      iframeLocalStorage[key] = iframe.contentWindow.localStorage.getItem(key);
                    }
                    console.log('üìä Iframe localStorage:', iframeLocalStorage);
                    alert(`Iframe localStorage:\n${JSON.stringify(iframeLocalStorage, null, 2)}`);
                  } catch (e) {
                    console.log('‚ùå Cannot access iframe localStorage:', e);
                    alert('Kh√¥ng th·ªÉ truy c·∫≠p localStorage c·ªßa iframe');
                  }
                }
              }}
              className="px-6 py-2 bg-teal-600 text-white rounded-lg hover:bg-teal-700 transition-colors"
            >
              Check Iframe LocalStorage
            </button>

            <button
              onClick={checkCurrentConversation}
              className="px-6 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
            >
              Ki·ªÉm tra Conversation Hi·ªán t·∫°i
            </button>

            <div className="flex items-center text-sm text-gray-600">
              <span className="font-medium">Current Conversation:</span>
              <span className="ml-2 font-mono bg-gray-100 px-2 py-1 rounded">
                {currentConversationId}
              </span>
            </div>
          </div>
        </div>

        {/* Chatbot Iframe */}
        <div className="bg-white rounded-lg shadow-md overflow-hidden">
          <div className="p-4 border-b border-gray-200">
            <h2 className="text-xl font-semibold">Chatbot Interface</h2>
            <p className="text-sm text-gray-600">
              Chatbot ID: {chatflow?.id} | Name: {chatflow?.name} | Conversation: {currentConversationId}
            </p>
          </div>

          <div className="h-[600px]">
            {chatflow?.embed_url ? (
              <iframe
                key={iframeKey}
                src={`${chatflow.embed_url}?conversationId=${currentConversationId}`}
                className="w-full h-full border-0"
                title="Test Chatbot"
                allow="fullscreen"
                sandbox="allow-scripts allow-same-origin allow-forms allow-popups allow-presentation"
                onLoad={() => {
                  console.log('Chatbot iframe loaded with conversation:', currentConversationId);
                  console.log('Iframe src:', `${chatflow.embed_url}?conversationId=${currentConversationId}`);
                }}
                onError={(e) => {
                  console.error('Iframe failed to load:', e);
                }}
              />
            ) : (
              <div className="flex items-center justify-center h-full text-gray-500">
                <div className="text-center">
                  <p className="mb-4">Kh√¥ng th·ªÉ t·∫£i chatbot. Vui l√≤ng ki·ªÉm tra embed URL.</p>
                  <p className="text-sm">Chatflow data: {JSON.stringify(chatflow, null, 2)}</p>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Test Results */}
        <div className="mt-6 bg-white rounded-lg shadow-md p-6">
          <h2 className="text-xl font-semibold mb-4">K·∫øt qu·∫£ Test & H∆∞·ªõng d·∫´n Dify</h2>
          <div className="bg-gray-50 p-4 rounded-lg">
            <p className="text-sm text-gray-600 mb-2">
              <strong>Instructions:</strong>
            </p>
            <ul className="text-sm text-gray-600 space-y-1 mb-4">
              <li>‚Ä¢ Click v√†o c√°c n√∫t Conversation ƒë·ªÉ chuy·ªÉn ƒë·ªïi gi·ªØa c√°c cu·ªôc h·ªôi tho·∫°i</li>
              <li>‚Ä¢ Nh·∫•n "Test ƒê·ªìng B·ªô H√≥a" ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu ƒë∆∞·ª£c ƒë·ªìng b·ªô t·ª´ Dify</li>
              <li>‚Ä¢ Nh·∫•n "M·ªü trong Tab M·ªõi" ƒë·ªÉ test chatbot tr·ª±c ti·∫øp</li>
              <li>‚Ä¢ Chat trong iframe v√† ki·ªÉm tra xem d·ªØ li·ªáu c√≥ ƒë∆∞·ª£c l∆∞u v√† ƒë·ªìng b·ªô kh√¥ng</li>
              <li>‚Ä¢ Ki·ªÉm tra console ƒë·ªÉ xem log chi ti·∫øt</li>
            </ul>

            <div className="border-t pt-4">
              <p className="text-sm font-medium text-blue-700 mb-2">
                üîç Ki·ªÉm tra URL Dify: <span className="text-green-600">‚úÖ C√≥ th·ªÉ truy c·∫≠p</span>
              </p>
              <p className="text-sm text-gray-600 mb-2">
                <strong>V·∫•n ƒë·ªÅ conversation switching:</strong> Dify iframe c√≥ th·ªÉ kh√¥ng h·ªó tr·ª£ thay ƒë·ªïi conversation_id ƒë·ªông.
              </p>
              <ul className="text-sm text-gray-600 space-y-1">
                <li>1. <strong>Test tr·ª±c ti·∫øp:</strong> Nh·∫•n "M·ªü trong Tab M·ªõi" v·ªõi conversation_id kh√°c nhau</li>
                <li>2. <strong>Set LocalStorage:</strong> Dify c√≥ th·ªÉ ƒë·ªçc conversation_id t·ª´ localStorage c·ªßa parent</li>
                <li>3. <strong>T·∫°o ID m·ªõi:</strong> S·ª≠ d·ª•ng n√∫t "T·∫°o Conversation ID M·ªõi" ƒë·ªÉ test v·ªõi ID m·ªõi</li>
                <li>4. <strong>Ki·ªÉm tra Network:</strong> Xem API calls c√≥ s·ª≠ d·ª•ng conversation_id m·ªõi kh√¥ng</li>
                <li>5. <strong>Force Reload:</strong> S·ª≠ d·ª•ng n√∫t "Force Reload Iframe" ƒë·ªÉ reload iframe ho√†n to√†n</li>
                <li>6. <strong>Monitor Network:</strong> M·ªü DevTools ‚Üí Network tab ‚Üí Filter by "messages" ƒë·ªÉ xem API calls</li>
              </ul>

              <div className="mt-3 p-2 bg-yellow-50 border border-yellow-200 rounded">
                <p className="text-xs text-yellow-800">
                  <strong>üí° G·ª£i √Ω:</strong> N·∫øu Dify kh√¥ng h·ªó tr·ª£ switch conversation trong iframe:
                  <br />‚Ä¢ M·ªü nhi·ªÅu tab v·ªõi conversation_id kh√°c nhau
                  <br />‚Ä¢ Test ƒë·ªìng b·ªô h√≥a b·∫±ng c√°ch chat trong c√°c tab kh√°c nhau
                  <br />‚Ä¢ Ki·ªÉm tra data ƒë∆∞·ª£c l∆∞u trong backend database
                  <br />‚Ä¢ S·ª≠ d·ª•ng "Force Reload Iframe" ƒë·ªÉ test v·ªõi conversation m·ªõi
                </p>
              </div>

              <div className="mt-3 p-2 bg-red-50 border border-red-200 rounded">
                <p className="text-xs text-red-800">
                  <strong>ÔøΩ V·∫•n ƒë·ªÅ ƒë√£ bi·∫øt:</strong>
                  <br />‚Ä¢ Dify iframe c√≥ th·ªÉ ƒëang cache conversation_id c≈© trong localStorage
                  <br />‚Ä¢ URL parameters (?conversationId=...) c√≥ th·ªÉ kh√¥ng ƒë∆∞·ª£c Dify t√¥n tr·ªçng
                  <br />‚Ä¢ C·∫ßn clear localStorage c·ªßa iframe tr∆∞·ªõc khi switch conversation
                  <br />‚Ä¢ S·ª≠ d·ª•ng "Reset Everything" ƒë·ªÉ test t·ª´ ƒë·∫ßu
                </p>
              </div>

              <div className="mt-3 p-2 bg-orange-50 border border-orange-200 rounded">
                <p className="text-xs text-orange-800">
                  <strong>üîç V·ªÅ 401 Unauthorized:</strong>
                  <br />‚Ä¢ <strong>Direct API calls s·∫Ω lu√¥n b·ªã 401</strong> v√¨ thi·∫øu authentication
                  <br />‚Ä¢ <strong>Thay v√†o ƒë√≥:</strong> Monitor network requests t·ª´ iframe
                  <br />‚Ä¢ <strong>C√°ch monitor:</strong> DevTools ‚Üí Network ‚Üí Filter "udify.app"
                  <br />‚Ä¢ <strong>Ki·ªÉm tra:</strong> conversation_id trong URL parameters c·ªßa requests
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

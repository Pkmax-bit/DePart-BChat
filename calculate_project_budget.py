#!/usr/bin/env python3
"""
Function ƒë·ªÉ t√≠nh to√°n v√† c·∫≠p nh·∫≠t ng√¢n s√°ch k·∫ø ho·∫°ch cho c√¥ng tr√¨nh
ngan_sach_ke_hoach = t·ªïng invoices_quote + t·ªïng chiphi_quote c·ªßa c√¥ng tr√¨nh
"""

import sys
import os

# Add backend to path
backend_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'backend')
sys.path.append(backend_path)

# Load environment variables from backend/.env
from dotenv import load_dotenv
load_dotenv(dotenv_path=os.path.join(backend_path, '.env'))

try:
    from backend.supabase_client import supabase
    print('=== NG√ÇN S√ÅCH K·∫æ HO·∫†CH CALCULATION ===')
    print()

    def calculate_project_budget_plan(project_id=None):
        """
        T√≠nh to√°n ng√¢n s√°ch k·∫ø ho·∫°ch cho m·ªôt c√¥ng tr√¨nh c·ª• th·ªÉ ho·∫∑c t·∫•t c·∫£ c√¥ng tr√¨nh

        Args:
            project_id (int, optional): ID c·ªßa c√¥ng tr√¨nh. N·∫øu None, t√≠nh cho t·∫•t c·∫£ c√¥ng tr√¨nh
        """
        try:
            # L·∫•y danh s√°ch c√¥ng tr√¨nh c·∫ßn t√≠nh
            if project_id:
                projects_result = supabase.table('cong_trinh').select('id, name_congtrinh').eq('id', project_id).execute()
            else:
                projects_result = supabase.table('cong_trinh').select('id, name_congtrinh').execute()

            updated_count = 0

            for project in projects_result.data:
                project_id = project['id']
                project_name = project['name_congtrinh']

                # T√≠nh t·ªïng invoices_quote cho c√¥ng tr√¨nh n√†y
                invoices_result = supabase.table('invoices_quote').select('ngan_sach_ke_hoach').eq('id_congtrinh', project_id).execute()
                total_invoices = sum(invoice['ngan_sach_ke_hoach'] or 0 for invoice in invoices_result.data)

                # T√≠nh t·ªïng chiphi_quote cho c√¥ng tr√¨nh n√†y
                chiphi_result = supabase.table('chiphi_quote').select('giathanh').eq('id_congtrinh', project_id).execute()
                total_chiphi = sum(chiphi['giathanh'] or 0 for chiphi in chiphi_result.data)

                # T√≠nh ng√¢n s√°ch k·∫ø ho·∫°ch
                ngan_sach_ke_hoach = total_invoices + total_chiphi

                # C·∫≠p nh·∫≠t v√†o database
                supabase.table('cong_trinh').update({
                    'ngan_sach_ke_hoach': ngan_sach_ke_hoach
                }).eq('id', project_id).execute()

                print(f"‚úÖ C·∫≠p nh·∫≠t c√¥ng tr√¨nh '{project_name}' (ID: {project_id}):")
                print(f"   - T·ªïng invoices_quote: {total_invoices:,.0f} VND")
                print(f"   - T·ªïng chiphi_quote: {total_chiphi:,.0f} VND")
                print(f"   - Ng√¢n s√°ch k·∫ø ho·∫°ch: {ngan_sach_ke_hoach:,.0f} VND")
                print()

                updated_count += 1

            print(f"üéâ ƒê√£ c·∫≠p nh·∫≠t ng√¢n s√°ch k·∫ø ho·∫°ch cho {updated_count} c√¥ng tr√¨nh")
            return {"success": True, "updated_count": updated_count}

        except Exception as e:
            print(f"‚ùå L·ªói khi t√≠nh to√°n ng√¢n s√°ch k·∫ø ho·∫°ch: {e}")
            return {"success": False, "error": str(e)}

    def update_project_budget_on_invoice_change(invoice_data):
        """
        C·∫≠p nh·∫≠t ng√¢n s√°ch k·∫ø ho·∫°ch khi c√≥ thay ƒë·ªïi trong invoices_quote

        Args:
            invoice_data (dict): D·ªØ li·ªáu invoice ƒë√£ thay ƒë·ªïi
        """
        try:
            project_id = invoice_data.get('id_congtrinh')
            if project_id:
                print(f"üìù C·∫≠p nh·∫≠t ng√¢n s√°ch k·∫ø ho·∫°ch cho c√¥ng tr√¨nh ID {project_id} do thay ƒë·ªïi invoice")
                return calculate_project_budget_plan(project_id)
            return {"success": True, "message": "Kh√¥ng c√≥ project_id trong invoice_data"}
        except Exception as e:
            print(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t ng√¢n s√°ch t·ª´ invoice: {e}")
            return {"success": False, "error": str(e)}

    def update_project_budget_on_expense_change(expense_data):
        """
        C·∫≠p nh·∫≠t ng√¢n s√°ch k·∫ø ho·∫°ch khi c√≥ thay ƒë·ªïi trong chiphi_quote

        Args:
            expense_data (dict): D·ªØ li·ªáu expense ƒë√£ thay ƒë·ªïi
        """
        try:
            project_id = expense_data.get('id_congtrinh')
            if project_id:
                print(f"üìù C·∫≠p nh·∫≠t ng√¢n s√°ch k·∫ø ho·∫°ch cho c√¥ng tr√¨nh ID {project_id} do thay ƒë·ªïi chi ph√≠")
                return calculate_project_budget_plan(project_id)
            return {"success": True, "message": "Kh√¥ng c√≥ project_id trong expense_data"}
        except Exception as e:
            print(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t ng√¢n s√°ch t·ª´ expense: {e}")
            return {"success": False, "error": str(e)}

    if __name__ == "__main__":
        import argparse

        parser = argparse.ArgumentParser(description='T√≠nh to√°n ng√¢n s√°ch k·∫ø ho·∫°ch cho c√¥ng tr√¨nh')
        parser.add_argument('--project_id', type=int, help='ID c·ªßa c√¥ng tr√¨nh c·ª• th·ªÉ (t√πy ch·ªçn)')
        parser.add_argument('--all', action='store_true', help='T√≠nh to√°n cho t·∫•t c·∫£ c√¥ng tr√¨nh')

        args = parser.parse_args()

        if args.project_id:
            result = calculate_project_budget_plan(args.project_id)
        elif args.all:
            result = calculate_project_budget_plan()
        else:
            print("Vui l√≤ng s·ª≠ d·ª•ng --project_id <id> ho·∫∑c --all")
            sys.exit(1)

        if result.get('success'):
            print("‚úÖ Ho√†n th√†nh th√†nh c√¥ng!")
        else:
            print(f"‚ùå C√≥ l·ªói x·∫£y ra: {result.get('error')}")
            sys.exit(1)

except ImportError as e:
    print(f'‚ùå L·ªói import: {e}')
    print('üí° ƒê·∫£m b·∫£o backend ƒëang ch·∫°y v√† SUPABASE_URL, SUPABASE_SERVICE_KEY ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p')
except Exception as e:
    print(f'‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}')